#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat<<EOF
Usage: $0 [-s <sif>] [-d <directory>] [-c] [-V <version>]
  -s, --sif        Explicit SIF filename (with or without .sif)
  -d, --directory  Directory to search first (skips cache dirs)
  -c, --clean      Kill/prune/unregister existing VS Code tunnels before starting
  -V, --vscode-version <ver>  Version of VS Code to install (default: latest)
  -h, --help       Show this help and exit
EOF
  exit 1
}

# ——— Defaults —————————————————
args_for_path=()
clean=false
vscode_version="latest"

# parse flags
while [[ $# -gt 0 ]]; do
  case $1 in
    -s|--sif)
      args_for_path+=(--sif "$2")
      shift 2
      ;;
    -d|--directory)
      args_for_path+=(--directory "$2")
      shift 2
      ;;
    -c|--clean)
      clean=true
      shift
      ;;
    -V|--vscode-version)
      vscode_version="$2"
      shift 2
      ;;
    -h|--help)
      usage
      ;;
    -*)
      echo "Unknown option: $1" >&2
      usage
      ;;
    *)
      # no positional args expected
      usage
      ;;
  esac
done

# 1) locate the SIF
if ! sif_path=$(apptainer-path "${args_for_path[@]}"); then
  echo "Error: no SIF found" >&2
  exit 1
fi
echo "Found SIF: $sif_path"

# 2) ensure `code` CLI is installed in $HOME/.local/bin
cli_path="$HOME/.local/bin/code"
path_install_script="$(dirname "$(realpath "$0")")/install-vscode"

if [[ ! -x "$cli_path" ]]; then
  [[ -f "$cli_path" ]] && {
    echo "Removing old non-executable CLI: $cli_path"
    rm -f "$cli_path"
  }
  echo "Installing VS Code CLI (version $vscode_version)..."
  apptainer-run \
    -s "$(basename "$sif_path")" \
    -d "$(dirname "$sif_path")" \
    -q \
    "$path_install_script" \
    -V "$vscode_version" \
    -b "$(dirname "$cli_path")"
else
  echo "VS Code CLI already installed at $cli_path"
fi

# 3) optionally clean up any existing tunnels
if $clean; then
  echo "Cleaning up existing VS Code tunnels..."
  for cmd in kill prune unregister; do
    apptainer-run \
      -s "$(basename "$sif_path")" \
      -d "$(dirname "$sif_path")" \
      -q \
      "$cli_path" tunnel "$cmd" \
      || true
    sleep 1
  done
fi

# 4) ensure tunnels are killed on exit
cleanup() {
  echo "Stopping VS Code tunnels..."
  apptainer-run \
    -s "$(basename "$sif_path")" \
    -d "$(dirname "$sif_path")" \
    -q \
    "$cli_path" tunnel kill \
    || true
}
trap cleanup EXIT SIGINT SIGTERM ERR

# 5) start the tunnel interactively
echo "Starting VS Code tunnel..."
apptainer-run \
  -s "$(basename "$sif_path")" \
  -d "$(dirname "$sif_path")" \
  -q \
  "$cli_path" tunnel --accept-server-license-terms
