#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat<<EOF
Usage: $0 [-s <sif>] [-d <directory>]
  -s, --sif        Explicit SIF filename (with or without .sif)
  -d, --directory  Directory to search first (skips cache dirs)
  -c, --clean                 : Kill/prune/unregister existing VS Code tunnels before starting
  -V, --vscode-version <ver>  : Version of VS Code to install (default: latest)
  -h, --help       Show this help and exit
EOF
  exit 1
}

# parse your flags into args_for_path
# after your source and arg-splitting boilerplate…
args_for_exists=()
clean=false
vscode_version="latest"
while [[ $# -gt 0 ]]; do
  if $saw_cmd; then
    custom_command+=( "$1" ); shift
    continue
  fi

  case $1 in
    -s|--sif)
      args_for_exists+=(--sif "$2"); shift 2;;
    -d|--directory)
      args_for_exists+=(--directory "$2"); shift 2;;
    -c|--clean)        clean=true;           shift;;
    -V|--vscode-version) vscode_version="$2"; shift 2;;
    -h|--help)
      usage;;
    -*)
      usage;;
  esac
done

# find the sif
if ! apptainer-exists "${args_for_exists[@]}"; then
  echo "Error: no SIF found" >&2
  exit 1
fi
echo "Found SIF: $sif_path"

# ensure `code` cli
cli_path="$HOME/.local/bin/code"
if [[ ! -x "$cli_path" ]]; then
  if [ -f "$cli_path" ]; then
    echo "Removing existing non-executable 'code' CLI at $cli_path"
    rm -f "$cli_path"
  fi
  echo "'code' CLI not found, installing VS Code $vscode_version..."
  apptainer-run -s "$basename($sif_path)" -d "$dirname($sif_path)" install-vscode.sh -V "$vscode_version" -b "$HOME/.local/bin"
else
  echo "Updating VS Code CLI (if needed)..."
  apptainer-run -s "$basename($sif_path)" -d "$dirname($sif_path)" "$cli_path" update || \
    echo "→ update either succeeded or was not needed"
fi

# 5) Clean up existing tunnels if requested
if $clean; then
  echo "Cleaning up existing VS Code tunnels..."
  for cmd in kill prune unregister; do
    apptainer-run -s "$basename($sif_path)" -d "$dirname($sif_path)" "$cli_path" tunnel $cmd || true
    sleep 1
  done
fi

# ensure we stop tunnels on exit
cleanup() {
  echo "Stopping any running VS Code tunnels..."
  apptainer-run -s "$basename($sif_path)" -d "$dirname($sif_path)" "$cli_path" tunnel kill || true
}
trap cleanup EXIT

# 6) Start the VS Code tunnel
echo "Starting VS Code tunnel..."
apptainer-run -s "$basename($sif_path)" -d "$dirname($sif_path)" "$cli_path" tunnel --accept-server-license-terms


