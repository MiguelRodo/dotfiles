#!/usr/bin/env bash

set -e

# Function to display usage
usage() {
    echo "Usage: $0 -R <registry> -u <user> -o <org> -p <password> -r <repo> [-t <tag>] [-s <sif_name>] [-b <base_dir>] [-f]"
    echo "  -R, --registry <registry>  : Registry to pull from ('docker' or 'ghcr'; optional, defaults to 'ghcr')"
    echo "  -r, --repo <repo>          : Repository name (optional; defaults to current director's basename)"
    echo "  -u, --user <user>          : Username for GitHub or Docker (required)"
    echo "  -o, --org <org>            : Organisation or username override for image (optional, defaults to 'user')"
    echo "  -p, --password <password>  : Password or token (optional, for 'ghrc' it defaults to GH_TOKEN, GITHUB_TOKEN, or GITHUB_PAT environment variables)"
    echo "  -t, --tag <tag>            : Tag (optional, defaults to 'latest')"
    echo "  -s, --sif <sif_name>       : SIF file name (optional, defaults to <repo>-<tag>.sif if <tag> was specified and <repo>.sif otherwise)"
    echo "  -b, --base_dir <base_dir>  : Base directory for storing the SIF file (optional, defaults to standard Apptainer cache directories)"
    echo "  -f, --force                : Force download and overwrite existing SIF file"
    echo ""
    echo "Description:"
    echo "  This script pulls an Apptainer image from Docker or the GitHub Container Registry and saves it locally as a SIF file."
    echo "  It uses the provided credentials and repository information to locate and download the image."
    echo ""
    echo "Examples:"
    echo "  $0 -u yourghcruser"
    echo "  $0 -o yourorg -p yourpassword - yourrepo"
    echo "  $0 -R docker -u yourdockeruser -o yourorg -p yourpassword - yourrepo -t latest"
    exit 1
}

# Initialize default values
TAG="latest"
TAG_SET="false"
FORCE=false
BASE_DIR=""
REGISTRY="ghcr"
ORG=""
REPO=$(basename $(pwd))

# Parse named parameters
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -R|--registry) REGISTRY="$2"; shift ;;
        -u|--user) USER="$2"; shift ;;
        -o|--org) ORG="$2"; shift ;;
        -p|--password) PASSWORD="$2"; shift ;;
        -r|--repo) REPO="$2"; shift ;;
        -t|--tag) TAG="$2"; TAG_SET="true"; shift ;;
        -s|--sif) SIF_NAME="$2"; shift ;;
        -b|--base_dir) BASE_DIR="$2"; shift ;;
        -f|--force) FORCE=true ;;
        -h|--help) usage ;;
        *) usage ;;
    esac
    shift
done

# Check mandatory parameters
if [ -z "$USER" ]; then
    echo "Error: User is required."
    usage
    exit 1
fi

# Set default values if not provided
if [ -z "$SIF_NAME" ]; then
    if [ "$TAG_SET" == "true" ]; then
        SIF_NAME="${REPO,,}-${TAG,,}.sif"
    else
        SIF_NAME="${REPO,,}.sif"
    fi
    SIF_NAME=$(echo "$SIF_NAME" | tr -d '[:space:]')
fi

# Determine the base directory if not provided
if [ -z "$BASE_DIR" ]; then
    if [ -n "$APPTAINER_CACHE_DIR" ]; then
        BASE_DIR="$APPTAINER_CACHE_DIR"
    elif [ -d "/scratch/$USER" ]; then
        BASE_DIR="/scratch/$USER/.local/share/apptainer/sif"
    else
        BASE_DIR="$HOME/.local/share/apptainer/sif"
    fi
fi

# Create the base directory and log directory if they don't exist
LOG_DIR="$BASE_DIR/logs/$REPO"
mkdir -p "$LOG_DIR"

# Full path for the SIF file
SIF_FILE="$BASE_DIR/${SIF_NAME,,}"

# Set up log file with date and time
LOG_FILE="$LOG_DIR/build_log_$(date '+%Y%m%d_%H%M%S').txt"

# Function to log messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}
# echo out all the options used
log "Options:"
log "  Registry: $REGISTRY"
log "  User: $USER"
log "  Organisation: ${ORG:-$USER}"
log "  Repository: $REPO"
log "  Password: ***"
log "  Tag: $TAG"
log "  SIF Name: $SIF_NAME"
log "  Base Directory: $BASE_DIR"
log "  Force: $FORCE"
log "  SIF File: $SIF_FILE"

# Function to handle errors and log the location of the log file
error_handler() {
    local err_msg="An error occurred during the script execution. See the log file for details: $LOG_FILE"
    log "$err_msg"
    echo "$err_msg"
    echo "To view the log file, run:"
    echo "cat $LOG_FILE"
    exit 1
}

# Trap errors to run the error handler
trap 'error_handler' ERR

# Check if SIF file already exists
if [ -f "$SIF_FILE" ] && [ "$FORCE" = false ]; then
    log "Error: SIF file '$SIF_FILE' already exists. Use --force to overwrite."
    echo "To view the log file, run:"
    echo "cat $LOG_FILE"
    exit 1
fi

# Set the registry hostname based on the chosen registry
if [ "$REGISTRY" = "docker" ]; then
    REGISTRY_HOSTNAME="docker.io"
elif [ "$REGISTRY" = "ghcr" ]; then
    REGISTRY_HOSTNAME="ghcr.io"
else
    log "Error: Unsupported registry '$REGISTRY'"
    exit 1
fi

# Set the password (GH_TOKEN) if not provided and GHCR is used
if [ "$REGISTRY" = "ghcr" ]; then
    PASSWORD=${PASSWORD:-$GH_TOKEN}
    PASSWORD=${PASSWORD:-$GITHUB_TOKEN}
    PASSWORD=${PASSWORD:-$GITHUB_PAT}
fi

# Log in to the registry if credentials are provided
if [ -n "$PASSWORD" ]; then
    log "Logging into $REGISTRY"
    echo "$PASSWORD" | apptainer registry login -u "$USER" --password-stdin "docker://$REGISTRY_HOSTNAME"
else
    log "No credentials provided, skipping login for $REGISTRY"
fi

# Function to build Apptainer image
build_apptainer() {
    local organisation="${ORG:-$USER}"
    local image_uri="docker://${REGISTRY_HOSTNAME}/${organisation}/${REPO}:${TAG}"
    
    log "Building Apptainer image '$SIF_FILE' from Docker image '$image_uri'"
    apptainer build --force "$SIF_FILE" "$image_uri"
    log "Apptainer build process completed"
}

# Run the build function
build_apptainer

log "Apptainer image '$SIF_FILE' created successfully"
