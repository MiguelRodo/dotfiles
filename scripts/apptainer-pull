#!/usr/bin/env bash
# Requires Bash ≥ 4.0

set -euo pipefail

die() {
  printf '[ERROR] %s\n' "$*" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: $0 [-R <registry>] (-u <user> | -o <org>) [-p <password>] [-r <repo>] [-i <images>] [-t <tag>] [-s <sif>] [-d <dir_base>] [-f] [-D]
  -R, --registry   Registry ('docker' or 'ghcr'; defaults to 'ghcr')
  -u, --user       Username for login (required for private images)
  -o, --org        Org/owner override (defaults to Git remote owner)
  -p, --password   Password/token (GHCR reads GH_TOKEN, GITHUB_TOKEN or GITHUB_PAT if unset)
  -r, --repo       Repo name (defaults to current directory basename)
  -i, --image      Image name(s), comma-separated (defaults to <repo>-<branch>, then <repo>)
  -s, --sif        SIF filename (with or without .sif)
  -t, --tag        Tag (defaults to 'latest')
  -d, --dir_base   Directory to store SIF (defaults to cache dirs)
  -f, --force      Force download & overwrite existing SIF
  -D, --debug      Enable debug output
  -h, --help       Show this help and exit
EOF
  exit 1
}

# turn on optional debug
enable_debug() {
  [[ "$debug" == true ]] && set -x
}

debug_log() {
  [[ "$debug" == true ]] && printf '[DEBUG] %s\n' "$*" >&2
}

# Determine org/user from args or Git remote
determine_org() {
  if [[ -n "$org" ]]; then
    echo "$org"
  elif [[ -n "$login_user" ]]; then
    echo "$login_user"
  else
    local remote
    remote=$(git config --get remote.origin.url 2>/dev/null) || remote=""
    if [[ "$remote" =~ github\.com[:/]+([^/]+)/ ]]; then
      echo "${BASH_REMATCH[1]}"
    else
      die "Cannot determine org/user from git remote; please specify -u or -o."
    fi
  fi
}

# Ensure required commands exist
ensure_prerequisites() {
  debug_log "Running ensure_prerequisites"
  for cmd in curl git apptainer jq; do
    command -v "$cmd" >/dev/null || die "'$cmd' not found; please install it."
  done
}

# Defaults
sif_specified=false
sif_file=""
image=()
tag="latest"
tag_set=false
force=""
dir_base=""
registry="ghcr"
org=""
repo="$(basename "$PWD")"
login_user=""
password=""
debug=false

# Parse CLI args
parse_args() {
  debug_log "Parsing arguments: $*"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -R|--registry) registry="$2"; debug_log "registry=$registry"; shift 2;;
      -u|--user)     login_user="$2"; debug_log "login_user=$login_user"; shift 2;;
      -o|--org)      org="$2"; debug_log "org=$org"; shift 2;;
      -p|--password) password="$2"; debug_log "password set"; shift 2;;
      -r|--repo)     repo="$2"; debug_log "repo=$repo"; shift 2;;
      -i|--image)    IFS=, read -r -a image <<<"$2"; debug_log "images=${image[*]}"; shift 2;;
      -s|--sif)      sif_specified=true; sif_file="${2%.sif}.sif"; debug_log "sif_file=$sif_file"; shift 2;;
      -t|--tag)      tag="$2"; tag_set=true; debug_log "tag=$tag"; shift 2;;
      -d|--dir_base) dir_base="$2"; debug_log "dir_base=$dir_base"; shift 2;;
      -f|--force)    force="--force"; debug_log "force enabled"; shift;;
      -D|--debug)    debug=true; debug_log "debug mode on"; shift;;
      -h|--help)     usage;;
      *) die "Unknown option: $1";;
    esac
  done
}

validate_required_params() {
  debug_log "Validating required parameters"
  if [[ -z "${login_user}${org}" ]]; then
    usage
  fi
}

get_hostname() {
  debug_log "Determining registry host for $registry"
  case "$registry" in
    docker) registry_host="docker.io";;
    ghcr)   registry_host="ghcr.io";;
    *) die "Unsupported registry '$registry'";;
  esac
  debug_log "registry_host=$registry_host"
}

get_ghcr_token() {
  debug_log "Fetching GHCR token if needed"
  if [[ "$registry" == "ghcr" && -z "$password" ]]; then
    password="${GH_TOKEN:-${GITHUB_TOKEN:-${GITHUB_PAT:-}}}"
    debug_log "GHCR token ${password:+retrieved}";
  fi
}

# Login before any registry probing
login() {
  debug_log "Authenticating to $registry_host"
  if [[ -n "$login_user" && -n "$password" ]]; then
    echo "$password" | apptainer registry login -u "$login_user" --password-stdin "docker://$registry_host"
  else
    debug_log "Skipping registry login (no credentials)"
  fi
}

get_image_candidates() {
  debug_log "Generating image candidates"
  if (( ${#image[@]} == 0 )); then
    local branch
    branch=$(get_current_branch)
    debug_log "current branch=$branch"
    if [[ -n "$branch" ]]; then
      image=("${repo,,}-$branch" "${repo,,}")
    else
      image=("${repo,,}")
    fi
    debug_log "candidates=${image[*]}"
  fi
}

get_current_branch() {
  debug_log "Fetching current Git branch"
  if git rev-parse --is-inside-work-tree &>/dev/null && git symbolic-ref --quiet HEAD &>/dev/null; then
    git symbolic-ref --short HEAD | tr '/\.' '_' | tr '[:upper:]' '[:lower:]'
  else
    echo ""
  fi
}

# Select the first valid image
choose_image() {
  debug_log "Choosing image from candidates"
  local src_org cand uri
  src_org=$(determine_org)
  debug_log "using org/user=$src_org"
  src_org="${src_org,,}"
  for cand in "${image[@]}"; do
    uri="docker://$registry_host/$src_org/$cand:$tag"
    debug_log "testing $uri"
    if image_exists "$uri"; then
      debug_log "chosen $uri"
      echo "$uri"
      return 0
    fi
  done
  return 1
}

# Use basic auth and HEAD probe for existence
image_exists() {
  debug_log "Checking existence of $1"
  local uri="$1" host repo_tag repo tag status auth_opts url
  host=${uri#docker://}; host=${host%%/*}
  repo_tag=${uri#docker://$host/}
  repo=${repo_tag%:*}
  tag=${repo_tag##*:}
  auth_opts=()
  if [[ -n "$login_user" && -n "$password" ]]; then
    auth_opts=(-u "$login_user:$password")
  fi
  url="https://$host/v2/$repo/manifests/$tag"
  debug_log "HEAD $url with opts: ${auth_opts[*]}"
  status=$(curl -sSLI -o /dev/null -w '%{http_code}' "${auth_opts[@]}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "$url")
  debug_log "Manifest check HTTP/$status for $repo:$tag"
  case "$status" in
    200) return 0;;
    401) die "401 Unauthorized—check your credentials";;
    404) return 1;;
    *) die "Registry returned $status for $repo:$tag";;
  esac
}

sif_filename_from_uri() {
  debug_log "Deriving SIF filename from $1"
  local sel_uri="$1" base br part
  base="${2,,}"
  br=$(get_current_branch)
  part=${sel_uri#*://*/}; part=${part%%:*}; part=${part##*/}
  if [[ "$part" == "$base-$br" ]]; then
    echo "$part.sif"
  else
    echo "$base.sif"
  fi
}

get_dir() {
  debug_log "Computing output directory"
  local d
  if [[ -n "$dir_base" ]]; then
    d="$dir_base"
  elif [[ -n "${APPTAINER_CACHE_DIR:-}" ]]; then
    d="$APPTAINER_CACHE_DIR"
  elif [[ -d "/scratch/$USER" ]]; then
    d="/scratch/$USER/.local/share/apptainer/sif"
  else
    d="$HOME/.local/share/apptainer/sif"
  fi
  mkdir -p "$d"
  echo "$d"
}

build_apptainer() {
  debug_log "Starting build_apptainer for $1"
  local uri="$1" dir_arg="$2" sif="${3:-}"
  echo "Building Apptainer image '$sif' from Docker image '$uri'"
  local digest out_dir
  digest=$(get_docker_digest "$uri")
  out_dir=$(get_dir "$dir_arg")
  apptainer build ${force:+--force} --label "docker.source.digest=$digest" "$out_dir/$sif" "$uri"
  echo "Completed: $sif"
}

get_docker_digest() {
  debug_log "Fetching Docker digest for $1"
  local uri="$1" host repo_tag repo tag manifest digest auth_opts url
  host=${uri#docker://}; host=${host%%/*}
  repo_tag=${uri#docker://$host/}
  repo=${repo_tag%:*}
  tag=${repo_tag##*:}
  auth_opts=() && [[ -n "$login_user" && -n "$password" ]] && auth_opts=(-u "$login_user:$password")
  url="https://$host/v2/$repo/manifests/$tag"
  manifest=$(curl -sSL "${auth_opts[@]}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "$url")
  digest=$(jq -r '.config.digest // empty' <<<"$manifest")
  [[ -n "$digest" ]] || die "Could not extract digest for $uri"
  echo "$digest"
}

main() {
  enable_debug
  ensure_prerequisites
  parse_args "$@"
  validate_required_params
  get_hostname
  get_ghcr_token
  login
  get_image_candidates
  debug_log "Image candidates: ${image[*]}"
  selected_uri=$(choose_image) || die "No matching image for $(determine_org)/$repo:$tag"
  echo "Found container image: $selected_uri"
  [[ "$sif_specified" == true ]] || sif_file=$(sif_filename_from_uri "$selected_uri" "$repo")
  echo "Will use SIF file: $sif_file"
  if [[ -z "$force" && -f "$(get_dir)/$sif_file" ]]; then
    echo "SIF '$sif_file' already present (use --force to overwrite)."; exit 0
  fi
  build_apptainer "$selected_uri" "$dir_base" "$sif_file"
}

main "$@"
