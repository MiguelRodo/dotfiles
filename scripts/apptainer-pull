#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<EOF
Usage: $0 -R <registry> -u <user> -o <org> -p <password> -r <repo> [-t <tag>] [-s <sif_name>] [-d <dir_base>] [-f]
  -R, --registry   Registry to pull from ('docker' or 'ghcr'; defaults to 'ghcr')
  -u, --user       Username for GitHub or Docker (required)
  -o, --org        Organisation or user override (defaults to \$login_user)
  -p, --password   Password or token (for GHCR defaults to GH_TOKEN, GITHUB_TOKEN or GITHUB_PAT)
  -r, --repo       Repository name (defaults to current directory basename)
  -i, --image      Image name (string or array; defaults to <repo>-<branch>, then <repo>)
  -s, --sif        SIF filename (with or without .sif)
  -t, --tag        Tag (defaults to 'latest')
  -d, --dir_base   Directory for storing the SIF (defaults to cache dirs)
  -f, --force      Force download & overwrite existing SIF
  -h, --help       Show this help and exit
EOF
  exit 1
}

ensure_jq() {
  command -v jq >/dev/null || {
    echo "Error: jq is required to extract manifest digests." >&2
    exit 1
  }
}

# ——— Defaults —————————————————
sif_specified=false
sif_file=""
branch="$(get_current_branch | tr '[:upper:]' '[:lower:]')"
# image may be either string or array
image=()
tag="latest"
tag_set=false
force=false
dir_base=""
registry="ghcr"
org=""
repo="$(basename "$PWD")"
login_user=""
password=""

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -R|--registry) registry="$2"; shift 2 ;;
      -u|--user)     login_user="$2"; shift 2 ;;
      -o|--org)      org="$2";        shift 2 ;;
      -p|--password) password="$2";   shift 2 ;;
      -r|--repo)     repo="$2";       shift 2 ;;
      -i|--image)
        # Accept comma-separated or space-separated list
        IFS=, read -r -a image <<<"$2"
        shift 2
        ;;
      -s|--sif)
        sif_specified=true
        sif_file="${2%.sif}.sif"
        shift 2
        ;;
      -t|--tag)
        tag="$2"
        tag_set=true
        shift 2
        ;;
      -d|--dir_base)
        dir_base="$2"
        shift 2
        ;;
      -f|--force)
        force=true
        shift
        ;;
      -h|--help)
        usage
        ;;
      *)
        echo "Unknown option: $1" >&2
        usage
        ;;
    esac
  done
}

validate_required_params() {
  if [[ -z "$login_user" && -z "$org" ]]; then
    echo "Error: either --user or --org must be specified." >&2
    usage
  fi
}

get_hostname() {
  local r="$registry"
  if [[ "$r" == "docker" ]]; then
    registry_host="docker.io"
  elif [[ "$r" == "ghcr" ]]; then
    registry_host="ghcr.io"
  else
    echo "Error: Unsupported registry '$r'" >&2
    exit 1
  fi
}

get_ghcr_token() {
  if [[ "$registry" == "ghcr" && -z "$password" ]]; then
    password="${GH_TOKEN:-${GITHUB_TOKEN:-${GITHUB_PAT:-}}}"
  fi
}

# Populate image array if user passed a single string or nothing
get_image_candidates() {
  if [[ ${#image[@]} -eq 0 ]]; then
    image=( "${repo,,}-${branch,,}" "${repo,,}" )
  fi
}

# Try each candidate until the manifest exists
choose_image() {
  local src_org="${org:-$login_user}"
  src_org="${src_org,,}"
  local cand uri
  for cand in "${image[@]}"; do
    uri="docker://${registry_host}/${src_org}/${cand}:${tag}"
    if image_exists "$uri"; then
      echo "$uri"
      return 0
    fi
  done
  return 1
}

# Only fetch manifest, never pull layers
image_exists() {
  local uri="$1"
  local h p_t p t auth_header
  h="${uri#docker://}"
  h="${h%%/*}"
  p_t="${uri#docker://$h/}"
  p="${p_t%:*}"
  t="${p_t##*:}"

  auth_header=()
  if [[ -n "$password" ]]; then
    auth_header=( -H "Authorization: Bearer $password" )
  fi

  curl --fail -sSL \
    -H "Accept: application/vnd.docker.distribution.manifest.v2+json,application/vnd.docker.distribution.manifest.list.v2+json" \
    "${auth_header[@]}" \
    "https://$h/v2/$p/manifests/$t" \
    >/dev/null 2>&1
}

# Derive sif filename from the image repo part
sif_filename_from_uri() {
  local sel_uri="$1" base_repo br repo_part
  base_repo="${2,,}"
  br="${3,,}"
  repo_part="${sel_uri#*://*/}"    # strip scheme & host => org/repo:tag
  repo_part="${repo_part%%:*}"     # org/repo
  repo_part="${repo_part##*/}"     # repo
  if [[ "$repo_part" == "$base_repo-$br" ]]; then
    echo "${repo_part}.sif"
  else
    echo "${base_repo}.sif"
  fi
}

get_dir() {
  local d
  if [[ -n "$dir_base" ]]; then
    d="$dir_base"
  elif [[ -n "${APPTAINER_CACHE_DIR:-}" ]]; then
    d="$APPTAINER_CACHE_DIR"
  elif [[ -d "/scratch/$USER" ]]; then
    d="/scratch/$USER/.local/share/apptainer/sif"
  else
    d="$HOME/.local/share/apptainer/sif"
  fi
  mkdir -p "$d"
  echo "$d"
}

login() {
  if [[ -n "$password" && -n "$login_user" ]]; then
    echo "Logging into $registry_host as $login_user"
    echo "$password" | apptainer registry login -u "$login_user" --password-stdin "docker://$registry_host"
  else
    echo "Skipping registry login (no credentials)"
  fi
}

get_docker_digest() {
  local uri="$1"
  local host path_tag path tag manifest digest auth_header

  # split out host, path, and tag
  host="${uri#docker://}"
  host="${host%%/*}"
  path_tag="${uri#docker://$host/}"
  path="${path_tag%:*}"
  tag="${path_tag##*:}"

  # set up auth if needed
  auth_header=()
  if [[ -n "$password" ]]; then
    auth_header=( -H "Authorization: Bearer $password" )
  fi

  # fetch only the manifest JSON
  manifest="$(curl -sSL \
    "${auth_header[@]}" \
    -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
    "https://$host/v2/$path/manifests/$tag")"

  # extract the config.digest field
  digest="$(jq -r '.config.digest // empty' <<<"$manifest")"
  if [[ -z "$digest" ]]; then
    echo "Error: could not extract digest for $uri" >&2
    return 1
  fi

  echo "$digest"
}

build_apptainer() {
  local sel_uri="$1"
  local dir_base="${2:-}"
  local sif_file="$3"
  local out_dir
  local digest

  echo "Building Apptainer image '$sif_file' from Docker image '$sel_uri'"

  # grab the digest (or fail early)
  if ! digest="$(get_docker_digest "$sel_uri")"; then
    echo "Failed to fetch digest, aborting." >&2
    exit 1
  fi

  out_dir=$(get_dir "$dir_base")
  mkdir -p "$out_dir"

  # build with the digest label
  apptainer build \
    "${force:+--force}" \
    --label "docker.source.digest=$digest" \
    "$out_dir/$sif_file" \
    "$sel_uri"

  echo "Completed: $sif_file"
}

main() {
  ensure_jq
  parse_args "$@"
  validate_required_params
  get_hostname
  get_ghcr_token
  get_image_candidates

  # 1. pick the image
  selected_uri="$(choose_image)" || {
    echo "Error: no matching image for ${org:-$login_user}/$repo:$tag" >&2
    exit 1
  }
  echo "Found container image: $selected_uri"

  # 2. sif filename
  if ! $sif_specified; then
    sif_file="$(sif_filename_from_uri "$selected_uri" "$repo" "$branch")"
  fi
  echo "Will use SIF file: $sif_file"

  # 4. existing SIF?
  if [[ "$force" != true ]] && apptainer-exists -q -s "$sif_file"; then
    echo "SIF '$sif_file' already present (use --force to overwrite)."
    exit 0
  fi

  # 5. login & build
  login
  build_apptainer "$selected_uri" "$dir_base" "$sif_file"
}

main "$@"
