#!/usr/bin/env bash
# Requires Bash ≥ 4.0

set -euo pipefail

usage() {
  cat <<EOF
Usage: $0 [-R <registry>] (-u <user> | -o <org>) [-p <password>] [-r <repo>] [-i <images>] [-t <tag>] [-s <sif>] [-d <dir_base>] [-f] [-D]
  -R, --registry   Registry to pull from ('docker' or 'ghcr'; defaults to 'ghcr')
  -u, --user       Username for GitHub or Docker (required)
  -o, --org        Organisation or user override (defaults to \$login_user)
  -p, --password   Password or token (for GHCR defaults to GH_TOKEN, GITHUB_TOKEN or GITHUB_PAT)
  -r, --repo       Repository name (defaults to current directory basename)
  -i, --image      Image name (string or array; defaults to <repo>-<branch>, then <repo>)
  -s, --sif        SIF filename (with or without .sif)
  -t, --tag        Tag (defaults to 'latest')
  -d, --dir_base   Directory for storing the SIF (defaults to cache dirs)
  -f, --force      Force download & overwrite existing SIF
  -D, --debug      Enable debug output
  -h, --help       Show this help and exit
EOF
  exit 1
}

enable_debug() {
  if [[ "$debug" == true ]]; then
    set -x
  fi
}

debug_log() {
  if [[ "$debug" == true ]]; then
    printf '[DEBUG] %s\n' "$*"
  fi
}

ensure_prerequisites() {
  debug_log "Running ensure_prerequisites"
  for cmd in curl git apptainer jq; do
    command -v "$cmd" >/dev/null || {
      echo "Error: '$cmd' not found; please install it." >&2
      exit 1
    }
  done
}

# ——— Defaults —————————————————
sif_specified=false
sif_file=""
image=()
tag="latest"
tag_set=false
force=""
dir_base=""
registry="ghcr"
org=""
repo="$(basename "$PWD")"
login_user=""
password=""
debug=false

parse_args() {
  debug_log "Parsing arguments: $*"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -R|--registry) registry="$2"; debug_log "Set registry=$registry"; shift 2;;
      -u|--user)     login_user="$2"; debug_log "Set login_user=$login_user"; shift 2;;
      -o|--org)      org="$2"; debug_log "Set org=$org"; shift 2;;
      -p|--password) password="$2"; debug_log "Password provided"; shift 2;;
      -r|--repo)     repo="$2"; debug_log "Set repo=$repo"; shift 2;;
      -i|--image)    IFS=, read -r -a image <<<"$2"; debug_log "Set image candidates=${image[*]}"; shift 2;;
      -s|--sif)      sif_specified=true; sif_file="${2%.sif}.sif"; debug_log "SIF specified: $sif_file"; shift 2;;
      -t|--tag)      tag="$2"; tag_set=true; debug_log "Set tag=$tag"; shift 2;;
      -d|--dir_base) dir_base="$2"; debug_log "Set dir_base=$dir_base"; shift 2;;
      -f|--force)    force="--force"; debug_log "Force enabled"; shift;;
      -D|--debug)    debug=true; debug_log "Debug mode on"; shift;;
      -h|--help)     usage;;
      *)
        echo "Unknown option: $1" >&2
        usage
        ;;
    esac
  done
}

validate_required_params() {
  debug_log "Validating required parameters"
  if [[ -z "$login_user" && -z "$org" ]]; then
    echo "Error: either --user or --org must be specified." >&2
    usage
  fi
}

get_hostname() {
  debug_log "Determining registry host for $registry"
  if [[ "$registry" == "docker" ]]; then
    registry_host="docker.io"
  elif [[ "$registry" == "ghcr" ]]; then
    registry_host="ghcr.io"
  else
    echo "Error: Unsupported registry '$registry'" >&2
    exit 1
  fi
  debug_log "registry_host=$registry_host"
}

get_ghcr_token() {
  debug_log "Fetching GHCR token if needed"
  if [[ "$registry" == "ghcr" && -z "$password" ]]; then
    password="${GH_TOKEN:-${GITHUB_TOKEN:-${GITHUB_PAT:-}}}"
    debug_log "GHCR token ${password:+retrieved}";
  fi
}

get_image_candidates() {
  debug_log "Generating image candidates"
  if (( ${#image[@]} == 0 )); then
    local branch
    branch="$(get_current_branch | tr '[:upper:]' '[:lower:]')"
    debug_log "Current branch: $branch"
    if [[ -n "$branch" ]]; then
      image=( "${repo,,}-$branch" "${repo,,}" )
    else
      image=( "${repo,,}" )
    fi
    debug_log "Candidates: ${image[*]}"
  fi
}

get_current_branch() {
  debug_log "Fetching current Git branch"
  if ! git rev-parse --is-inside-work-tree &>/dev/null || ! git symbolic-ref --quiet HEAD &>/dev/null; then
    echo ""
  else
    git symbolic-ref --short HEAD | tr '/\\.' '_' | tr '[:upper:]' '[:lower:]'
  fi
}

choose_image() {
  debug_log "Choosing image from candidates"
  local src_org="${org:-$login_user}"
  src_org="${src_org,,}"
  local cand uri
  for cand in "${image[@]}"; do
    uri="docker://$registry_host/$src_org/$cand:$tag"
    debug_log "Testing $uri"
    if image_exists "$uri"; then
      debug_log "Chosen $uri"
      echo "$uri"
      return 0
    fi
  done
  return 1
}

image_exists() {
  debug_log "Checking existence of $1"
  local uri="$1" h p_t p t auth_header
  h="${uri#docker://}"; h="${h%%/*}"
  p_t="${uri#docker://$h/}"; p="${p_t%:*}"; t="${p_t##*:}"
  auth_header=(); [[ -n "$password" ]] && auth_header=( -H "Authorization: Bearer $password" )
  curl --fail -sSL -H "Accept: application/vnd.docker.distribution.manifest.v2+json,application/vnd.docker.distribution.manifest.list.v2+json" "${auth_header[@]}" "https://$h/v2/$p/manifests/$t" >/dev/null 2>&1
}

sif_filename_from_uri() {
  debug_log "Deriving SIF filename from $1"
  local sel_uri="$1" base_repo br repo_part
  base_repo="${2,,}"
  br="$(get_current_branch | tr '[:upper:]' '[:lower:]')"
  repo_part="${sel_uri#*://*/}"; repo_part="${repo_part%%:*}"; repo_part="${repo_part##*/}"
  if [[ "$repo_part" == "$base_repo-$br" ]]; then
    echo "${repo_part}.sif"
  else
    echo "${base_repo}.sif"
  fi
}

get_dir() {
  debug_log "Computing output directory"
  local d
  if [[ -n "$dir_base" ]]; then
    d="$dir_base"
  elif [[ -n "${APPTAINER_CACHE_DIR:-}" ]]; then
    d="$APPTAINER_CACHE_DIR"
  elif [[ -d "/scratch/$USER" ]]; then
    d="/scratch/$USER/.local/share/apptainer/sif"
  else
    d="$HOME/.local/share/apptainer/sif"
  fi
  mkdir -p "$d"
  echo "$d"
}

login() {
  debug_log "Logging into registry if credentials provided"
  if [[ -n "$password" && -n "$login_user" ]]; then
    echo "Logging into $registry_host as $login_user"
    echo "$password" | apptainer registry login -u "$login_user" --password-stdin "docker://$registry_host"
  else
    echo "Skipping registry login (no credentials)"
  fi
}

get_docker_digest() {
  debug_log "Fetching Docker digest for $1"
  local uri="$1" host path_tag path tag manifest digest auth_header
  host="${uri#docker://}"; host="${host%%/*}"
  path_tag="${uri#docker://$host/}"; path="${path_tag%:*}"; tag="${path_tag##*:}"
  auth_header=(); [[ -n "$password" ]] && auth_header=( -H "Authorization: Bearer $password" )
  manifest="$(curl -sSL "${auth_header[@]}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "https://$host/v2/$path/manifests/$tag")"
  digest="$(jq -r '.config.digest // empty' <<<"$manifest")"
  if [[ -z "$digest" ]]; then
    echo "Error: could not extract digest for $uri" >&2
    return 1
  fi
  echo "$digest"
}

build_apptainer() {
  debug_log "Starting build_apptainer for $1"
  local sel_uri="$1" dir_base_arg="${2:-}" sif_file="$3" out_dir digest
  echo "Building Apptainer image '$sif_file' from Docker image '$sel_uri'"
  digest="$(get_docker_digest "$sel_uri")" || { echo "Failed to fetch digest, aborting." >&2; exit 1; }
  out_dir=$(get_dir "$dir_base_arg"); mkdir -p "$out_dir"
  apptainer build ${force:+--force} --label "docker.source.digest=$digest" "$out_dir/$sif_file" "$sel_uri"
  echo "Completed: $sif_file"
}

main() {
  enable_debug
  ensure_prerequisites
  parse_args "$@"
  validate_required_params
  get_hostname
  get_ghcr_token
  get_image_candidates

  debug_log "Selecting image..."
  if ! selected_uri="$(choose_image)"; then
    echo "Error: no matching image for ${org:-$login_user}/$repo:$tag" >&2
    exit 1
  fi
  echo "Found container image: $selected_uri"

  if ! \$sif_specified; then
    sif_file="$(sif_filename_from_uri "$selected_uri" "$repo")"
  fi
  echo "Will use SIF file: $sif_file"

  if [[ -z "$force" ]] && apptainer-exists -q -s "$sif_file"; then
    echo "SIF '$sif_file' already present (use --force to overwrite)."
    exit 0
  fi

  login
  build_apptainer "$selected_uri" "$dir_base" "$sif_file"
}

main "$@"
