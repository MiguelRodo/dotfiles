#!/usr/bin/env bash
# Requires Bash ≥ 4.0

set -euo pipefail

die() {
  printf '[ERROR] %s\n' "$*" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: $0 [-R <registry>] (-u <user> | -o <org>) [-p <password>] [-r <repo>] [-i <images>] [-t <tag>] [-s <sif>] [-d <dir_base>] [-f] [-D]
  -R, --registry   Registry ('docker' or 'ghcr'; defaults to 'ghcr')
  -u, --user       Username for login (required for private images)
  -o, --org        Org/owner override (defaults to Git remote owner)
  -p, --password   Password/token (GHCR reads GH_TOKEN, GITHUB_TOKEN or GITHUB_PAT if unset)
  -r, --repo       Repo name (defaults to current directory basename)
  -i, --image      Image name(s), comma-separated (defaults to <repo>-<branch>, then <repo>)
  -s, --sif        SIF filename (with or without .sif)
  -t, --tag        Tag (defaults to 'latest')
  -d, --dir_base   Directory to store SIF (defaults to cache dirs)
  -f, --force      Force download & overwrite existing SIF
  -D, --debug      Enable debug output
  -t, --trace      Enable trace output
  -h, --help       Show this help and exit
EOF
  exit 1
}

# turn on optional debug
enable_trace() {
  [[ "$trace" == true ]] && set -x
}

debug_log() {
  if [[ "$debug" == true ]]; then
    printf '[DEBUG] %s\n' "$*" >&2
  fi
  return 0
}

# Determine org/user from args or Git remote
determine_org() {
  if [[ -n "$org" ]]; then
    echo "$org"
  elif [[ -n "$login_user" ]]; then
    echo "$login_user"
  else
    local remote
    remote=$(git config --get remote.origin.url 2>/dev/null) || remote=""
    if [[ "$remote" =~ github\.com[:/]+([^/]+)/ ]]; then
      echo "${BASH_REMATCH[1]}"
    else
      die "Cannot determine org/user from git remote; please specify -u or -o."
    fi
  fi
}

# Ensure required commands exist
ensure_prerequisites() {
  debug_log "Running ensure_prerequisites"
  for cmd in curl git apptainer jq; do
    command -v "$cmd" >/dev/null || die "'$cmd' not found; please install it."
  done
}

# Defaults
sif_specified=false
sif_file=""
image=()
tag="latest"
tag_set=false
force=""
dir_base=""
registry="ghcr"
org=""
repo="$(basename "$PWD")"
login_user=""
password=""
debug=false
trace=false

# Parse CLI args
parse_args() {
  debug_log "Parsing arguments: $*"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -R|--registry) registry="$2"; shift 2;;
      -u|--user)     login_user="$2"; shift 2;;
      -o|--org)      org="$2"; shift 2;;
      -p|--password) password="$2"; shift 2;;
      -r|--repo)     repo="$2"; shift 2;;
      -i|--image)    IFS=, read -r -a image <<<"$2"; shift 2;;
      -s|--sif)      sif_specified=true; sif_file="${2%.sif}.sif"; shift 2;;
      -t|--tag)      tag="$2"; tag_set=true; shift 2;;
      -d|--dir_base) dir_base="$2"; shift 2;;
      -f|--force)    force="--force"; shift;;
      -D|--debug)    debug=true; shift;;
      -h|--help)     usage;;
      *) die "Unknown option: $1";;
    esac
  done
}

log_args() {
  debug_log "registry=$registry"
  debug_log "login_user=$login_user"
  debug_log "org=$org"
  debug_log "repo=$repo"
  debug_log "image=${image[*]}"
  debug_log "sif_file=$sif_file"
  debug_log "tag=$tag"
  debug_log "tag_set=$tag_set"
  debug_log "dir_base=$dir_base"
  debug_log "force=$force"
  debug_log "debug=$debug"
}

validate_required_params() {
  debug_log "Validating required parameters"
  if [[ -z "${login_user}${org}" ]]; then
    usage
  fi
}

get_hostname() {
  debug_log "Determining registry host for $registry"
  case "$registry" in
    docker) registry_host="docker.io";;
    ghcr)   registry_host="ghcr.io";;
    *) die "Unsupported registry '$registry'";;
  esac
  debug_log "registry_host=$registry_host"
}

get_ghcr_token() {
  debug_log "Fetching GHCR token if needed"
  if [[ "$registry" == "ghcr" && -z "$password" ]]; then
    password="${GH_TOKEN:-${GITHUB_TOKEN:-${GITHUB_PAT:-}}}"
    debug_log "GHCR token ${password:+retrieved}";
  fi
}

# Login before any registry probing
login() {
  debug_log "Authenticating to $registry_host"
  if [[ -n "$login_user" && -n "$password" ]]; then
    echo "$password" | apptainer registry login -u "$login_user" --password-stdin "docker://$registry_host"
  else
    debug_log "Skipping registry login (no credentials)"
  fi
}

get_image_candidates() {
  debug_log "Generating image candidates"
  if (( ${#image[@]} == 0 )); then
    local branch
    branch=$(get_current_branch)
    debug_log "current branch=$branch"
    if [[ -n "$branch" ]]; then
      image=("${repo,,}-$branch" "${repo,,}")
    else
      image=("${repo,,}")
    fi
    debug_log "candidates=${image[*]}"
  fi
}

get_current_branch() {
  debug_log "Fetching current Git branch"
  if git rev-parse --is-inside-work-tree &>/dev/null && git symbolic-ref --quiet HEAD &>/dev/null; then
    git symbolic-ref --short HEAD | tr '/\.' '_' | tr '[:upper:]' '[:lower:]'
  else
    echo ""
  fi
}

sif_filename_from_uri() {
  debug_log "Deriving SIF filename from $1"
  local sel_uri="$1" base br part
  base="${2,,}"
  br=$(get_current_branch)
  part=${sel_uri#*://*/}; part=${part%%:*}; part=${part##*/}
  if [[ "$part" == "$base-$br" ]]; then
    echo "$part.sif"
  else
    echo "$base.sif"
  fi
}

get_dir() {
  debug_log "Computing output directory"
  local d
  if [[ -n "$dir_base" ]]; then
    d="$dir_base"
  elif [[ -n "${APPTAINER_CACHE_DIR:-}" ]]; then
    d="$APPTAINER_CACHE_DIR"
  elif [[ -d "/scratch/$USER" ]]; then
    d="/scratch/$USER/.local/share/apptainer/sif"
  else
    d="$HOME/.local/share/apptainer/sif"
  fi
  mkdir -p "$d"
  echo "$d"
}

build_apptainer() {
  debug_log "Starting build_apptainer for $1"
  local uri="$1" dir_arg="$2" sif="${3:-}"
  echo "Building Apptainer image '$sif' from Docker image '$uri'"
  local digest out_dir
  out_dir=$(get_dir "$dir_arg")
  apptainer build ${force:+--force} "$out_dir/$sif" "$uri"
  echo "Completed: $sif"
}

main() {
  parse_args "$@"
  enable_trace
  log_args
  ensure_prerequisites
  validate_required_params
  get_hostname
  get_ghcr_token
  login
  get_image_candidates
  debug_log "Image candidates: ${image[*]}"

  # Try each image candidate in turn; the first one that builds wins
  local success=0
  for cand in "${image[@]}"; do
    src_org=$(determine_org); src_org="${src_org,,}"
    uri="docker://$registry_host/$src_org/$cand:$tag"
    # derive the sif filename for this URI
    sif_candidate=$(sif_filename_from_uri "$uri" "$repo")
    echo "Attempting to build from: $uri → $sif_candidate"

    # disable errexit so we can catch failures
    set +e
    build_apptainer "$uri" "$dir_base" "$sif_candidate"
    rc=$?
    set -e

    if [[ $rc -eq 0 ]]; then
      success=1
      break
    else
      echo "[WARN] build from $uri failed (exit $rc), trying next candidate..."
    fi
  done

  if [[ $success -eq 0 ]]; then
    die "No matching image could be pulled for $(determine_org)/$repo:$tag"
  fi
  echo "Successfully built SIF: $sif_candidate"
}

main "$@"
