#!/usr/bin/env bash
set -euo pipefail

# Load shared helpers (must define apptainer_common_get_cache_dirs)
source "$HOME/.local/bin/apptainer-common"

usage() {
  cat <<EOF
Usage: $0 -R <registry> -u <user> -o <org> -p <password> -r <repo> [-t <tag>] [-s <sif_name>] [-d <DIR_BASE>] [-f]
  -R, --registry <registry>   Registry to pull from ('docker' or 'ghcr'; defaults to 'ghcr')
  -u, --user <user>           Username for GitHub or Docker (required)
  -o, --org <org>             Organisation or user override (defaults to \$LOGIN_USER)
  -p, --password <password>   Password or token (for GHCR defaults to GH_TOKEN, GITHUB_TOKEN or GITHUB_PAT)
  -r, --repo <repo>           Repository name (defaults to current directory basename)
  -s, --sif <sif_name>        SIF filename (defaults to start with <repo>, appends -<branch>-<tag> if --no-append unused and tag set, and ends with .sif)
  -n, --no-append             Do not append branch or tag to SIF name, if sif unspecified
  -t, --tag <tag>             Tag (defaults to 'latest')
  -d, --directory <dir>       Directory for storing the SIF (defaults to first cache dir)
  -f, --force                 Force download & overwrite existing SIF
EOF
  exit 1
}

# Defaults
SIF_NAME=""
branch="$(apptainer_common_get_branch | tr '[:upper:]' '[:lower:]')"
BRANCH="-$branch"
NO_APPEND=false
TAG="latest";
TAG_SET=false
FORCE=false
DIR_BASE=""
REGISTRY="ghcr"
ORG=""
REPO="$(basename "$PWD")"
LOGIN_USER=""
PASSWORD=""

# 1) Parse flags
while [[ $# -gt 0 ]]; do
  case $1 in
    -R|--registry)    REGISTRY="$2"; shift 2 ;;
    -u|--user)        LOGIN_USER="$2"; shift 2 ;;
    -o|--org)         ORG="$2";       shift 2 ;;
    -p|--password)    PASSWORD="$2";  shift 2 ;;
    -r|--repo)        REPO="$2";      shift 2 ;;
    -s|--sif)         SIF_NAME="$2";  shift 2 ;;
    -t|--tag)         TAG="$2"; TAG_SET=true; shift 2 ;;
    -n|--no-append)   NO_APPEND=true; shift ;;
    -d|--directory)   DIR_BASE="$2";  shift 2 ;;
    -f|--force)       FORCE=true;     shift ;;
    -h|--help)        usage ;;
    *)                usage ;;
  esac
done

# 2) Validate mandatory
if [[ -z "$LOGIN_USER" && -z "$ORG" ]]; then
  echo "Error: either --user or --org must be specified." >&2
  usage
  exit 1
fi

# 3) Compute default SIF_NAME if needed
if [ -z "$SIF_NAME" ]; then
    if [ "$NO_APPEND" = true ]; then
        SIF_NAME="${REPO,,}.sif"
    else
        if [ "$TAG_SET" == "true" ]; then
            SIF_NAME="${REPO,,}-${BRANCH}-${TAG,,}.sif"
        else
            SIF_NAME="${REPO,,}-${BRANCH}.sif"
        fi
    fi
    SIF_NAME=$(echo "$SIF_NAME" | tr -d '[:space:]')
fi

# 4) Check if the SIF already exists anywhere
# Build the args for apptainer-exists:
exists_args=( -s "$SIF_NAME" )
if [[ -n "$DIR_BASE" ]]; then
  exists_args+=( -d "$DIR_BASE" )
fi

# Now call it. On success it prints “Found: /path/to/xyz.sif”
if found_line=$(apptainer-exists "${exists_args[@]}"); then
  # extract just the path
  existing_path=${found_line#Found: }
  echo "⇒ SIF already present at: $existing_path"
  if ! $FORCE; then
    echo "Use --force if you really want to re-pull."
    exit 0
  else
    echo "Overwriting because --force was specified."
  fi
fi

# 5) Decide where to put the new SIF
#
if [[ -n "$DIR_BASE" ]]; then
  target_dir="$DIR_BASE"
else
  mapfile -t base_dirs < <(apptainer_common_get_cache_dirs)
  target_dir="${base_dirs[0]}"
fi
mkdir -p "$target_dir/logs/$REPO"
SIF_FILE="$target_dir/$SIF_NAME"

# Create the base directory and log directory if they don't exist
LOG_DIR="$DIR_BASE/logs/$REPO"
mkdir -p "$LOG_DIR"

# Full path for the SIF file
SIF_FILE="$DIR_BASE/${SIF_NAME,,}"

# --- echo out all the options used ---
echo "Options:"
echo "  Registry:     $REGISTRY"
echo "  User:         $LOGIN_USER"
echo "  Organisation: ${ORG:-$LOGIN_USER}"
echo "  Repository:   $REPO"
echo "  Tag:          $TAG"
echo "  SIF Name:     $SIF_NAME"
echo "  Directory:    ${DIR_BASE:-<default cache dir>}"
echo "  Force:        $FORCE"
echo "  Target SIF:   $SIF_FILE"
echo

# --- simple error handler ---
error_handler() {
    echo "Error: something went wrong during script execution." >&2
    exit 1
}
trap 'error_handler' ERR

# --- bail if SIF already exists and we're not forcing ---
if [[ -f "$SIF_FILE" && "$FORCE" != true ]]; then
    echo "Error: SIF file '$SIF_FILE' already exists. Use --force to overwrite." >&2
    exit 1
fi

# --- choose registry hostname ---
if [[ "$REGISTRY" == "docker" ]]; then
    REGISTRY_HOSTNAME="docker.io"
elif [[ "$REGISTRY" == "ghcr" ]]; then
    REGISTRY_HOSTNAME="ghcr.io"
else
    echo "Error: Unsupported registry '$REGISTRY'" >&2
    exit 1
fi

# --- pick up GHCR token if needed ---
if [[ "$REGISTRY" == "ghcr" && -z "$PASSWORD" ]]; then
    PASSWORD="${GH_TOKEN:-${GITHUB_TOKEN:-${GITHUB_PAT:-}}}"
fi

# --- login if we have creds ---
if [[ -n "$PASSWORD" && -n "$LOGIN_USER" ]]; then
    echo "Logging into $REGISTRY_HOSTNAME as $LOGIN_USER"
    echo "$PASSWORD" \
      | apptainer registry login -u "$LOGIN_USER" --password-stdin \
        "docker://$REGISTRY_HOSTNAME"
else
    echo "Skipping registry login (no credentials provided)"
fi

# Function to build Apptainer image
build_apptainer() {
    local org="${ORG:-$LOGIN_USER}"
    org="${org,,}"
    local repo="${REPO,,}"
    local uri="docker://${REGISTRY_HOSTNAME}/${org}/${repo}:${TAG}"

    echo "Building Apptainer image '$SIF_FILE' from Docker image '$uri'"

    if [[ "$FORCE" == true ]]; then
        apptainer build --force "$SIF_FILE" "$uri"
    else
        apptainer build "$SIF_FILE" "$uri"
    fi

    echo "Apptainer build process completed for '$SIF_FILE'"
}

# Run the build function
build_apptainer

echo "Apptainer image '$SIF_FILE' created successfully"
