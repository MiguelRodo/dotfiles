#!/usr/bin/env bash

set -e

# Function to display usage
usage() {
    echo "Usage: $0 [-l <log_dir>] -s <slurm_script> [sbatch_options...]"
    echo ""
    echo "  -l, --log-dir <log_dir> : Directory to save logs (default: _tmp/log/sbatch)"
    echo "  -s, --script-path <slurm_script> : Path to the Slurm script"
    echo "  [sbatch_options...]     : Additional options to pass to sbatch"
    echo ""
    echo "Description:"
    echo "  This script submits a Slurm job and logs the details of the submission, including"
    echo "  the script contents and standard output, to files in a specified log directory."
    echo ""
    echo "  The script name is sanitized by removing any non-alphanumeric characters except"
    echo "  dashes (-) and underscores (_). The sanitized name is used in the log filenames."
    echo "  The log filenames also include the current date and time to ensure uniqueness."
    echo ""
    echo "Example:"
    echo "  $0 -l custom_logs -s my_job_script.sh -- --mem=4G --time=2:00:00"
    echo ""
    exit 1
}

# Default log directory
WD=$(pwd)
LOG_DIR=_tmp/log/sbatch

# Parse options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -l|--log-dir) LOG_DIR="$2"; shift 2 ;;
        -s|--script-path) SLURM_SCRIPT="$2"; shift 2 ;;
        -h|--help) usage ;;
        --) shift; break ;;
        -*|--*) echo "Unknown option: $1"; usage ;;
        *)  break ;;
    esac
done

LOG_DIR_SHORT="$LOG_DIR"
if [[ ! "$LOG_DIR" = /* ]]; then
    LOG_DIR="$WD/$LOG_DIR"
fi

# Ensure a Slurm script is provided
if [ -z "$SLURM_SCRIPT" ]; then
    echo "Error: Slurm script path is required."
    usage
fi

if [[ ! "$SLURM_SCRIPT" = /* ]]; then
    SLURM_SCRIPT="$WD/$SLURM_SCRIPT"
fi

# Handle any remaining sbatch options
sbatch_options=("$@")

# Create the log directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Create .gitignore if it doesn't exist and add the log directory to it
if [[ -d "$WD/.git" ]] && [[ ! "$LOG_DIR_SHORT" = /* ]]; then
    PATH_GITIGNORE="$WD/.gitignore"
    if [ ! -f "$PATH_GITIGNORE" ]; then
        touch "$PATH_GITIGNORE"
    fi
    # Check if the log directory is already in .gitignore, and if not, add it
    if ! grep -Fxq "$LOG_DIR_SHORT" "$PATH_GITIGNORE"; then
        echo "$LOG_DIR_SHORT" >> "$PATH_GITIGNORE"
        echo "$LOG_DIR_SHORT has been added to .gitignore"
    fi
fi

# Generate the log file name based on the current date and time
LOG_FILE_TIME=$(date '+%Y-%m-%d_%H-%M-%S')
SANITIZED_SCRIPT_NAME=$(basename "$SLURM_SCRIPT" .sh | tr -cd '[:alnum:]_-')
LOG_FILE_BASENAME="run_$SANITIZED_SCRIPT_NAME_${LOG_FILE_TIME}_script.txt"
LOG_FILE_SHORT="$LOG_DIR_SHORT/$LOG_FILE_BASENAME"
LOG_FILE="$LOG_DIR/$LOG_FILE_BASENAME"

LOG_FILE_SCRIPT_BASENAME="run_$SANITIZED_SCRIPT_NAME_${LOG_FILE_TIME}_out.txt"
LOG_FILE_SCRIPT_SHORT="$LOG_DIR_SHORT/$LOG_FILE_SCRIPT_BASENAME"
LOG_FILE_SCRIPT="$LOG_DIR/$LOG_FILE_SCRIPT_BASENAME"

# Copy the contents of the sbatch script over to the log file
{
    echo "--- SLURM SCRIPT ---"
    cat "$SLURM_SCRIPT"
    echo "--------------------"
    echo ""
} >> "$LOG_FILE"

# Run sbatch with the provided script and options, capturing the job ID and standard output
{
    echo "--- Standard Output ---"
    sbatch_output=$(sbatch "${sbatch_options[@]}" -o "$LOG_FILE_SCRIPT" "$SLURM_SCRIPT")
    echo "$sbatch_output"
    echo "-----------------------"
    echo ""
} >> "$LOG_FILE"

# Output a message indicating where the log file is located
echo "$sbatch_output"
echo "To view a record of the slurm script submitted, run:"
echo "cat '$LOG_FILE_SCRIPT_SHORT'"
echo "To view the log file, run:"
echo "cat '$LOG_FILE_SHORT'"
