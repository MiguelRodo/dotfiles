#!/usr/bin/env bash

set -e

# Function to display usage
usage() {
    echo "Usage: $0 [-s <sif>] [-d <directory>] [<command> ...]"
    echo "  -s, --sif <sif>             : Name of the SIF file to run (optional; defaults to the current directory name)"
    echo "  -d, --directory <directory> : Directory to search for the SIF file (optional)"
    echo "  <command>                   : Custom command to run with Rscript."
    echo ""
    echo "Example: $0 -s mycontainer 'print(\"abc\")'"
    echo ""
    echo "Guidelines:"
    echo "  - Always enclose your command inside single quotes if it contains special characters."
    echo "  - Use double quotes within the command for strings or characters, and escape them, e.g.:"
    echo "    $0 -s mycontainer 'print(\\\"abc\\\")'"
    echo "  - Avoid escaping quotes unnecessarily; keep the command simple."
    echo "  - It is good practice to always enclose your command in single quotes."
    exit 0
}

# Initialize default values
SIF_FILE="$(basename "$PWD" | tr '[:upper:]' '[:lower:]').sif"
DIRECTORY=""
CUSTOM_COMMAND=()

# Parse named parameters and command
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--sif) SIF_FILE="$2"; shift 2 ;;
        -d|--directory) DIRECTORY="$2"; shift 2 ;;
        -h|--help) usage ;;
        --) shift; CUSTOM_COMMAND+=("$@"); break ;;
        -*|--*) usage ;;
        *) CUSTOM_COMMAND+=("$1"); shift ;;
    esac
done

# Ensure the SIF_FILE ends with .sif and convert to lowercase
SIF_FILE="$(echo "${SIF_FILE%.sif}.sif" | tr '[:upper:]' '[:lower:]')"

# Determine the base directories
if [ -n "$APPTAINER_CACHE_DIR" ]; then
    SCRATCH_DIR="$APPTAINER_CACHE_DIR"
elif [ -d "/scratch/$USER/.local/share/apptainer/sif" ]; then
    SCRATCH_DIR="/scratch/$USER/.local/share/apptainer/sif"
else
    SCRATCH_DIR=""
fi

if [ -d "$HOME/.local/share/apptainer/sif" ]; then
    HOME_DIR="$HOME/.local/share/apptainer/sif"
else
    HOME_DIR=""
fi

# Create a log directory and log file
SIF_FILE_BASENAME=$(basename "$SIF_FILE")
log_dir="${SCRATCH_DIR:-$HOME/.local/share/apptainer/sif}/logs/${SIF_FILE_BASENAME%.sif}"
mkdir -p "$log_dir"
log_file="$log_dir/run_log_$(date '+%Y%m%d_%H%M%S').txt"

# Function to log messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$log_file"
}

# Convert CUSTOM_COMMAND array to a single string
COMMAND_STRING="${CUSTOM_COMMAND[@]}"

# Determine the full path of the SIF file
if [ -n "$DIRECTORY" ]; then
    SIF_PATH="$DIRECTORY/$SIF_FILE"
elif [ -n "$SCRATCH_DIR" ] && [ -f "$SCRATCH_DIR/$SIF_FILE" ]; then
    SIF_PATH="$SCRATCH_DIR/$SIF_FILE"
elif [ -n "$HOME_DIR" ] && [ -f "$HOME_DIR/$SIF_FILE" ]; then
    SIF_PATH="$HOME_DIR/$SIF_FILE"
else
    log "Error: SIF file '$SIF_FILE' not found in any specified or default directories."
    echo "To view the log file, run:"
    echo "cat $log_file"
    exit 1
fi

# Log the parsed options
log "Options:"
log "  SIF File: $SIF_FILE"
log "  Directory: $DIRECTORY"
log "  Scratch Directory: $SCRATCH_DIR"
log "  Home Directory: $HOME_DIR"
log "  SIF Path: $SIF_PATH"
log "  Command: $COMMAND_STRING"
log "  Log File: $log_file"

# Function to handle errors and log the location of the log file
error_handler() {
    log "An error occurred. See the log file for details: $log_file"
    echo "To view the log file, run:"
    echo "cat $log_file"
    exit 1
}

# Trap errors to run the error handler
trap 'error_handler' ERR

# Log the command for debugging
log "Running Apptainer with Rscript command: $COMMAND_STRING"

# Execute the command with apptainer
apptainer-run ${SIF_FILE:+-s "$SIF_FILE"} ${DIRECTORY:+-d "$DIRECTORY"} -- Rscript -e "$COMMAND_STRING"
