#!/usr/bin/env bash
# apptainer-common â€” just a collection of functions, no global vars.
# the primary purpose is to find the path to the SIF file.

# Get list of branches (or fall back to main/master)
apptainer_common_get_branches() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null \
       || ! git symbolic-ref --quiet HEAD &>/dev/null; then
        echo main master
    else
        # list all local branches only by their short names
        git for-each-ref --format='%(refname:short)' refs/heads/ | tr '/' '_'
    fi
} 

apptainer_common_get_current_branch() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null \
     || ! git symbolic-ref --quiet HEAD &>/dev/null; then
    echo main
  else
    git symbolic-ref --short HEAD | tr '/' '_'
  fi
}

# Emit default <wd>-<branch>.sif plus <wd>.sif
apptainer_common_default_candidates() {
    local base current branches br
    base=$(basename "$PWD" | tr '[:upper:]' '[:lower:]')
    current=$(apptainer_common_get_current_branch)

    # 1) current branch first
    echo "${base}-${current}.sif"

    # 2) main, if different
    [[ "$current" != "main" ]] && echo "${base}-main.sif"

    # 3) master, if different
    [[ "$current" != "master" ]] && echo "${base}-master.sif"

    # 4) remaining branches
    mapfile -t branches < <(git for-each-ref --format='%(refname:short)' refs/heads/)
    for br in "${branches[@]}"; do
        # skip current, main, master
        [[ "$br" == "$current" || "$br" == "main" || "$br" == "master" ]] && continue
        br=$(echo "$br" | tr '/' '_')
        echo "${base}-${br}.sif"
    done

    # 5) no-branch fallback
    echo "${base}.sif"
}

# Locate the SIF: prints the full path on success, returns 0; returns 1 if none found.
# Arguments (all optional, in any order):
#   --sif           The explicit sif name
#   --directory     A single directory to search (skips cache)
apptainer_common_find_sif() {
  local sif_specified=false sif_file candidates
  local directory=""
  local arg
  while [[ $# -gt 0 ]]; do
    case $1 in
      --sif)           sif_file="$2"; sif_specified=true; shift 2;;
      --directory)     directory="$2";          shift 2;;
      *)               break ;;
    esac
  done

  # 1) Build candidates[]
  if $sif_specified; then
    sif_file="${sif_file%.sif}.sif"
    candidates=( "$sif_file" )
  else
    mapfile -t candidates < <(apptainer_common_default_candidates)
    for i in "${!candidates[@]}"; do
      candidates[$i]=$(echo "${candidates[$i]}" | tr '[:upper:]' '[:lower:]')
    done
  fi

  # 2) Build base_dirs[]
  if [[ -n "$directory" ]]; then
    base_dirs=( "$directory" )
  else
    base_dirs=()
    if [[ -n "${APPTAINER_CACHE_DIR:-}" ]]; then
      base_dirs+=( "$APPTAINER_CACHE_DIR" )
    elif [[ -d "/scratch/$USER/.local/share/apptainer/sif" ]]; then
      base_dirs+=( "/scratch/$USER/.local/share/apptainer/sif" )
    fi
    [[ -d "$HOME/.local/share/apptainer/sif" ]] && \
      base_dirs+=( "$HOME/.local/share/apptainer/sif" )
  fi

  # 3) Search
  local cand dir
  for cand in "${candidates[@]}"; do
    for dir in "${base_dirs[@]}"; do
      [[ -f "$dir/$cand" ]] && {
        printf '%s\n' "$dir/$cand"
        return 0
      }
    done
  done

  return 1
}
