#!/usr/bin/env bash

set -euo pipefail

# Function to display usage
usage() {
    echo "Usage: $0 [-b <bin_dir>] [-V <vscode_version>]"
    echo "  -b, --bin-dir <bin_dir>        : Directory to place the 'code' executable (default: \$HOME/.local/bin)"
    echo "  -V, --vscode-version <version> : Version of VSCode to install (default: latest)"
    echo "  -f, --force                    : Force overwrite if 'code' already exists in the bin directory"
    echo "  -h, --help                     : Display help file"
    echo ""
    echo "Description:"
    echo "  This script downloads and installs the Visual Studio Code 'code' executable in the specified bin directory."
    echo "  It detects the system architecture and downloads the appropriate version of VSCode."
    echo ""
    echo "Examples:"
    echo "  $0"
    echo "  $0 -b \$HOME/.local/bin -V 1.70.0"
    exit 1
}

# Default values
bin_dir="$HOME/.local/bin"
vscode_version="latest"
force="false"
tmp_dir=""
cleanup() {
  [[ -n $tmp_dir && -d $tmp_dir ]] && rm -rf "$tmp_dir"
}
trap cleanup EXIT

# Parse named parameters
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -b|--bin-dir)
            bin_dir="$2"
            shift 2
            ;;
        -V|--vscode-version)
            vscode_version="$2"
            shift 2
            ;;
        -f|--force)
            force="true"
            shift
            ;;
        -h|--help)
            usage
            ;;
        --)
            shift
            break
            ;;
        -*|--*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
done

if [[ -f "$bin_dir/code" ]]; then
  if [[ "$force" == "false" ]]; then
    echo "Error: 'code' executable already exists in $bin_dir. Use --force to overwrite." >&2
    exit 1
  else
    echo "Warning: 'code' executable already exists in $bin_dir. It will be overwritten."
    rm -f "$bin_dir/code"
  fi
fi

# Detect architecture
case "$(uname -m)" in
  x86_64)    ARCH=linux-x64;;
  aarch64|arm64) ARCH=linux-arm64;;
  arm*)      ARCH=linux-armhf;;
  *) echo "Unsupported arch"; exit 1;;
esac

# Construct the download URL based on the architecture and version
if [[ $vscode_version == latest ]]; then
  DOWNLOAD_URL="https://update.code.visualstudio.com/latest/cli-$ARCH/stable/"
else
  DOWNLOAD_URL="https://update.code.visualstudio.com/$vscode_version/cli-$ARCH/stable/"
fi

# Logging installation details
echo "Installing VS Code CLI $vscode_version → $bin_dir"

mkdir -p "$bin_dir"

# Create a temporary directory in /tmp for the download
tmp_dir=$(mktemp -d)
echo "Download → $tmp_dir/vscode.tar.gz"
# choose downloader
if command -v curl &>/dev/null; then
  curl --fail -L "$DOWNLOAD_URL" -o "$tmp_dir/vscode.tar.gz"
elif command -v wget &>/dev/null; then
  wget -q -O "$tmp_dir/vscode.tar.gz" "$DOWNLOAD_URL"
else
  echo "Error: curl or wget required" >&2
  exit 1
fi


echo "Extracting…"
tar -xzf "$tmp_dir/vscode.tar.gz" -C "$tmp_dir"

# locate the 'code' binary
code_bin=$(find "$tmp_dir" -type f -name code -perm /111 | head -n1)
if [[ -z $code_bin ]]; then
  echo "Error: 'code' binary not found" >&2
  exit 1
fi

echo "Installing → $bin_dir/code"
install -Dm755 "$code_bin" "$bin_dir/code"

echo "Done! Run 'code --version' to verify."
