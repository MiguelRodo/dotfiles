#!/usr/bin/env bash

set -e

# Function to display usage
usage() {
    echo "Usage: $0 [-b <bin_dir>] [-V <vscode_version>]"
    echo "  -b, --bin-dir <bin_dir>        : Directory to place the 'code' executable (default: \$HOME/.local/bin)"
    echo "  -V, --vscode-version <version> : Version of VSCode to install (default: latest)"
    echo "  -h, --help : Display help file"
    echo ""
    echo "Description:"
    echo "  This script downloads and installs the Visual Studio Code 'code' executable in the specified bin directory."
    echo "  It detects the system architecture and downloads the appropriate version of VSCode."
    echo ""
    echo "Examples:"
    echo "  $0"
    echo "  $0 -b \$HOME/.local/bin -V 1.70.0"
    exit 1
}

# Default values
bin_dir="$HOME/.local/bin"
vscode_version="latest"

# Parse named parameters
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -b|--bin-dir)
            bin_dir="$2"
            shift 2
            ;;
        -V|--vscode-version)
            vscode_version="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        --)
            shift
            break
            ;;
        -*|--*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            echo "Unknown argument: $1"
            usage
            ;;
    esac
done

# Detect architecture
ARCH="$(uname -m)"
if [ "${ARCH}" == "x86_64" ]; then
    ARCH="linux-x64"
elif [ "${ARCH}" == "aarch64" ] || [ "${ARCH}" == "arm64" ]; then
    ARCH="linux-arm64"
elif [ "${ARCH}" == "arm" ]; then
    ARCH="linux-armhf"
else
    echo -e "Unsupported architecture: ${ARCH}"
    exit 1
fi

# Construct the download URL based on the architecture and version
if [ "$vscode_version" == "latest" ]; then
    DOWNLOAD_URL="https://update.code.visualstudio.com/latest/cli-${ARCH}/stable/"
else
    DOWNLOAD_URL="https://update.code.visualstudio.com/${vscode_version}/cli-${ARCH}/stable/"
fi

# Logging installation details
echo "Starting VSCode installation..."
echo "Binary Directory: $bin_dir"
echo "VSCode Version: $vscode_version"

# Ensure bin_dir exists with proper permissions
mkdir -p "$bin_dir"

# Remove existing 'code' binary if it exists
if [ -f "$bin_dir/code" ]; then
    echo "Removing existing 'code' binary in: $bin_dir"
    rm -f "$bin_dir/code"
fi

# Create a temporary directory in /tmp for the download
tmp_dir=$(mktemp -d -t vscode-XXXXXX)
echo "Downloading Visual Studio Code from $DOWNLOAD_URL to temporary directory: $tmp_dir"

# Download the specified version of Visual Studio Code
if ! wget "$DOWNLOAD_URL" -O "$tmp_dir/vscode.tar.gz"; then
    echo "Error: Failed to download Visual Studio Code."
    rm -rf "$tmp_dir"
    exit 1
fi

# Extract the downloaded archive
echo "Extracting Visual Studio Code..."
if ! tar -xzf "$tmp_dir/vscode.tar.gz" -C "$tmp_dir"; then
    echo "Error: Failed to extract Visual Studio Code."
    rm -rf "$tmp_dir"
    exit 1
fi

# Move the 'code' binary to bin_dir
if [ -f "$tmp_dir/code" ]; then
    echo "Installing 'code' executable to: $bin_dir"
    mv "$tmp_dir/code" "$bin_dir/code"
    chmod +x "$bin_dir/code"
else
    echo "Error: 'code' executable not found in the extracted archive."
    rm -rf "$tmp_dir"
    exit 1
fi

# Clean up the temporary directory
echo "Cleaning up temporary files..."
rm -rf "$tmp_dir"

echo "Installation complete!"
echo "The 'code' executable is available in: $bin_dir"
echo "To verify, you can run: code --version"
